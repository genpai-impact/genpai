//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.level
{

public sealed partial class EventDialogItem :  Bright.Config.BeanBase 
{
    public EventDialogItem(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["DialogName"].IsString) { throw new SerializationException(); }  DialogName = _json["DialogName"]; }
        { if(!_json["DialogDesc"].IsString) { throw new SerializationException(); }  DialogDesc = _json["DialogDesc"]; }
        { var _json1 = _json["eventStory"]; if(!_json1.IsArray) { throw new SerializationException(); } EventStory = new System.Collections.Generic.List<string>(_json1.Count); foreach(JSONNode __e in _json1.Children) { string __v;  { if(!__e.IsString) { throw new SerializationException(); }  __v = __e; }  EventStory.Add(__v); }   }
        { var _json1 = _json["selectionStory"]; if(!_json1.IsArray) { throw new SerializationException(); } SelectionStory = new System.Collections.Generic.List<int>(_json1.Count); foreach(JSONNode __e in _json1.Children) { int __v;  { if(!__e.IsNumber) { throw new SerializationException(); }  __v = __e; }  SelectionStory.Add(__v); }   }
        { var _json1 = _json["Rewards"]; if(!_json1.IsArray) { throw new SerializationException(); } Rewards = new System.Collections.Generic.List<level.Reward>(_json1.Count); foreach(JSONNode __e in _json1.Children) { level.Reward __v;  { if(!__e.IsObject) { throw new SerializationException(); }  __v = level.Reward.DeserializeReward(__e); }  Rewards.Add(__v); }   }
        PostInit();
    }

    public EventDialogItem(int id, string DialogName, string DialogDesc, System.Collections.Generic.List<string> eventStory, System.Collections.Generic.List<int> selectionStory, System.Collections.Generic.List<level.Reward> Rewards ) 
    {
        this.Id = id;
        this.DialogName = DialogName;
        this.DialogDesc = DialogDesc;
        this.EventStory = eventStory;
        this.SelectionStory = selectionStory;
        this.Rewards = Rewards;
        PostInit();
    }

    public static EventDialogItem DeserializeEventDialogItem(JSONNode _json)
    {
        return new level.EventDialogItem(_json);
    }

    /// <summary>
    /// 对话ID
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 对话名称
    /// </summary>
    public string DialogName { get; private set; }
    /// <summary>
    /// 事件描述
    /// </summary>
    public string DialogDesc { get; private set; }
    /// <summary>
    /// 事件剧情
    /// </summary>
    public System.Collections.Generic.List<string> EventStory { get; private set; }
    /// <summary>
    /// 选项分支（0为End）
    /// </summary>
    public System.Collections.Generic.List<int> SelectionStory { get; private set; }
    public System.Collections.Generic.List<level.Reward> Rewards { get; private set; }

    public const int __ID__ = -174258133;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in Rewards) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in Rewards) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "DialogName:" + DialogName + ","
        + "DialogDesc:" + DialogDesc + ","
        + "EventStory:" + Bright.Common.StringUtil.CollectionToString(EventStory) + ","
        + "SelectionStory:" + Bright.Common.StringUtil.CollectionToString(SelectionStory) + ","
        + "Rewards:" + Bright.Common.StringUtil.CollectionToString(Rewards) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
