//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.effect
{

/// <summary>
/// 用于构造Effect
/// </summary>
public sealed partial class EffectConstructProperties :  Bright.Config.BeanBase 
{
    public EffectConstructProperties(JSONNode _json) 
    {
        { if(!_json["effect_type"].IsNumber) { throw new SerializationException(); }  EffectType = (effect.EffectType)_json["effect_type"].AsInt; }
        { if(!_json["effect_appendix"].IsString) { throw new SerializationException(); }  EffectAppendix = _json["effect_appendix"]; }
        { if(!_json["numerical"].IsNumber) { throw new SerializationException(); }  Numerical = _json["numerical"]; }
        { if(!_json["target_type"].IsNumber) { throw new SerializationException(); }  TargetType = (effect.TargetType)_json["target_type"].AsInt; }
        { if(!_json["target_area"].IsNumber) { throw new SerializationException(); }  TargetArea = (effect.TargetArea)_json["target_area"].AsInt; }
        PostInit();
    }

    public EffectConstructProperties(effect.EffectType effect_type, string effect_appendix, int numerical, effect.TargetType target_type, effect.TargetArea target_area ) 
    {
        this.EffectType = effect_type;
        this.EffectAppendix = effect_appendix;
        this.Numerical = numerical;
        this.TargetType = target_type;
        this.TargetArea = target_area;
        PostInit();
    }

    public static EffectConstructProperties DeserializeEffectConstructProperties(JSONNode _json)
    {
        return new effect.EffectConstructProperties(_json);
    }

    /// <summary>
    /// 效果类型
    /// </summary>
    public effect.EffectType EffectType { get; private set; }
    /// <summary>
    /// 补充描述
    /// </summary>
    public string EffectAppendix { get; private set; }
    /// <summary>
    /// 补充数值
    /// </summary>
    public int Numerical { get; private set; }
    /// <summary>
    /// 目标类型
    /// </summary>
    public effect.TargetType TargetType { get; private set; }
    /// <summary>
    /// 目标范围
    /// </summary>
    public effect.TargetArea TargetArea { get; private set; }

    public const int __ID__ = -1681896228;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "EffectType:" + EffectType + ","
        + "EffectAppendix:" + EffectAppendix + ","
        + "Numerical:" + Numerical + ","
        + "TargetType:" + TargetType + ","
        + "TargetArea:" + TargetArea + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
